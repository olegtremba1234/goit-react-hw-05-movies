{"version":3,"file":"static/js/567.e9994fcb.chunk.js","mappings":"8KAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEVC,EAAc,mCAAG,oGACIF,EAAAA,EAAAA,IAAA,qCAAwCC,IAD5C,cACbE,EADa,yBAEZA,EAASC,KAAKC,SAFF,2CAAH,qDAKdC,EAAc,mCAAG,WAAMC,GAAN,uFACIP,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,4DAA6FM,IADjG,cACbJ,EADa,yBAEZA,EAASC,KAAKC,SAFF,2CAAH,sDAKdG,EAAiB,mCAAG,WAAMC,GAAN,uFACCT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,oBAAsCR,EAAtC,oBADD,cAChBE,EADgB,yBAEfA,EAASC,MAFM,2CAAH,sDAKjBM,EAAS,mCAAG,WAAMD,GAAN,uFACST,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,4BAA8CR,EAA9C,oBADT,cACRE,EADQ,yBAEPA,EAASC,KAAKO,MAFP,2CAAH,sDAKTC,EAAY,mCAAG,WAAMH,GAAN,uFACKT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,4BAA8CR,EAA9C,2BADL,cACXE,EADW,yBAEVA,EAASC,KAAKC,SAFJ,2CAAH,sDAKZQ,EAAQ,CACVX,eAAAA,EACAI,eAAAA,EACAE,kBAAAA,EACAE,UAAAA,EACAE,aAAAA,GAGJ,K,0HCQA,UAxCe,WACX,OAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,CAAC,GAAzD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,SAwBpC,OAjBAC,EAAAA,EAAAA,YAAU,WACN,GAAIF,EAAY,CACZ,IAAMG,EAAa,mCAAG,2FAClBP,GAAW,GADO,kBAGYL,EAAAA,EAAAA,eAAqBS,GAHjC,OAGRI,EAHQ,OAIdV,EAAeU,GAJD,gDAMdC,QAAQC,IAAR,MANc,yBAQdV,GAAW,GARG,4EAAH,qDAWnBO,GACH,CACJ,GAAC,CAACH,KAGC,6BACI,kBAAMO,SAxBO,SAAAC,GACjBA,EAAMC,iBACNV,EAAgB,CAAEW,MAAOF,EAAMG,OAAOC,SAASF,MAAMG,MAAMC,eAC9D,EAqBO,WACI,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,WAAS,KACzC,mBAAQF,KAAK,SAAb,uBAEHpB,IAAW,SAAC,IAAD,IACXF,IAAe,SAAC,IAAD,CAAYyB,MAAOzB,MAG9C,C,oDCfD,IA1BmB,SAAC,GAAe,IAAbyB,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,GACCA,EAAMG,KAAI,SAAAC,GAAI,OACZ,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMP,GAA/C,SACGG,EAAKK,SAFDL,EAAKE,GADF,KASrB,C,4CCJD,IAZe,WACX,OAAO,SAAC,KAAD,CACHI,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,MAAO,QAAS,OAAQ,SAAU,SAAU,WAE5D,C","sources":["API/API.js","Pages/Movies/Movies.jsx","components/EditorList/EditorList.jsx","components/Loader/Loader.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/'\nconst API_KEY = '4b8864cf5207c2132295f1e95f786e7c'\n\nconst fetchTrendings = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n};\n\nconst fetchByKeyword = async keyword => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`);\n    return response.data.results;\n};\n\nconst fetchMovieDetails = async movieId => {\n    const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n};\n\nconst fetchCast = async movieId => {\n    const response = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data.cast;\n};\n\nconst fetchReviews = async movieId => {\n    const response =await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data.results;\n};\n\nconst fetch = {\n    fetchTrendings,\n    fetchByKeyword,\n    fetchMovieDetails,\n    fetchCast,\n    fetchReviews,\n};\n\nexport default fetch;","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport fetch from \"API/API\";\nimport Loader from \"components/Loader/Loader\";\nimport EditorList from \"components/EditorList/EditorList\";\n\nconst Movies = () => {\n    const [searchFilms, setSearchFilms] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [searchParams, setSearchParams] = useSearchParams({});\n    const queryMovie = searchParams.get('query');\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        setSearchParams({ query: event.target.elements.query.value.toLowerCase() })\n    };\n\n    useEffect(() => {\n        if (queryMovie) {\n            const onSearchMovie = async () => {\n                setLoading(true)\n                try {\n                    const searchMovie = await fetch.fetchByKeyword(queryMovie)\n                    setSearchFilms(searchMovie)\n                } catch (error) {\n                    console.log(error)\n                } finally {\n                    setLoading(false)\n                }\n            } \n            onSearchMovie()\n        }\n    },[queryMovie]);\n\n    return (\n        <main>\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" name=\"query\" autoFocus />\n                <button type=\"submit\">Search</button>\n            </form>\n            {loading && <Loader />}\n            {searchFilms && <EditorList films={searchFilms} />}\n        </main>\n    )\n}\n\nexport default Movies;","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst EditorList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {films &&\n        films.map(film => (\n          <li key={film.id}>\n            <Link to={`/movies/${film.id}`} state={{ from: location }}>\n              {film.title}\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;","import { Vortex } from 'react-loader-spinner';\n\nconst Loader = () => {\n    return <Vortex\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"vortex-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"vortex-wrapper\"\n        colors={['red', 'green', 'blue', 'yellow', 'orange', 'purple']}\n    />\n}\n    \nexport default Loader;"],"names":["axios","API_KEY","fetchTrendings","response","data","results","fetchByKeyword","keyword","fetchMovieDetails","movieId","fetchCast","cast","fetchReviews","fetch","useState","searchFilms","setSearchFilms","loading","setLoading","useSearchParams","searchParams","setSearchParams","queryMovie","get","useEffect","onSearchMovie","searchMovie","console","log","onSubmit","event","preventDefault","query","target","elements","value","toLowerCase","type","name","autoFocus","films","location","useLocation","map","film","to","id","state","from","title","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}